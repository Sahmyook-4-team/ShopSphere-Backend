name: Backend CI/CD Deploy

on:
  push:
    branches:
      - master
      
  pull_request:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Backend
        uses: actions/checkout@v3
        with:
          path: backend

      #####################################
      # 2. Checkout Frontend Repository
      #####################################
      - name: Checkout Frontend
        uses: actions/checkout@v3
        with:
          repository: Sahmyook-4-team/ShopSphere-Frontend
          token: ${{ secrets.GH_TOKEN }}
          path: frontend

      #####################################
      # 3. Setup Node.js and Build Frontend
      #####################################
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install Frontend Dependencies
        working-directory: frontend
        run: npm install

      - name: Build Frontend
        working-directory: frontend
        run: |
          CI=false npm run build

      #####################################
      # 4. Copy Frontend build to Backend static
      #####################################
      - name: Copy Frontend Build to Backend Static Folder
        run: |
          rm -rf backend/src/main/resources/static/*
          cp -r frontend/build/* backend/src/main/resources/static/

      #####################################
      # 5. Setup JDK and Build Backend JAR
      #####################################
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build Backend JAR
        working-directory: backend
        run: |
          chmod +x ./gradlew
          ./gradlew bootJar -x test

      ############################################################
      # NEW STEP: Move JAR to a predictable location
      ############################################################
      - name: Move JAR to root
        run: mv backend/build/libs/app.jar app.jar

      #####################################
      # 6. Upload JAR to EC2 and Run Docker
      #####################################
      - name: Upload JAR to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          # 이제 source는 매우 단순하고 명확해집니다.
          source: app.jar
          target: ~/ShopSphere-Backend


      - name: Restart Backend in EC2 (Docker)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            echo "--- Restarting Backend ---"
            cd ~/ShopSphere-Backend

            CONTAINER_NAME="shopsphere-backend-app"

            # 수정된 부분: docker ps 명령어에 '-a' 옵션 추가
            # 이제 실행 중이든, 종료되었든 이름이 같은 컨테이너를 모두 찾습니다.
            if [ "$(sudo docker ps -aq -f name=^/${CONTAINER_NAME}$)" ]; then
                echo "--- Stopping and Removing Existing Container ---"
                # '-f' 옵션은 실행 중이 아니면 에러를 내므로, 그냥 rm -f 로 처리하는 것이 더 안전합니다.
                sudo docker rm -f ${CONTAINER_NAME}
            fi

            sudo docker system prune -a

            # 이 부분은 그대로 두거나, 더 견고하게 만들 수 있습니다. (아래 추가 설명 참조)
            ZOMBIE_CONTAINER_ID=$(sudo docker ps -aq --filter "publish=8080")
            if [ -n "$ZOMBIE_CONTAINER_ID" ]; then
                echo "--- Removing Zombie Container on port 8080 ---"
                sudo docker rm -f $ZOMBIE_CONTAINER_ID
            fi

            echo "--- Building and Running New Docker Container ---"
            sudo docker build --no-cache -t shopsphere-backend .
            sudo docker run -d -p 8080:8080 --name ${CONTAINER_NAME} shopsphere-backend

name: Backend CI/CD Deploy

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: SSH Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            # 3. 백엔드 빌드 및 재시작
            echo "--- Restarting Backend ---"
            cd ~/ShopSphere-Backend
            sudo chmod 777 gradlew
            ./gradlew bootJar -x test

            # 4. Docker 컨테이너 정리 (강화된 버전)
            CONTAINER_NAME="shopsphere-backend-app"

            # 4-1. 이름으로 기존 컨테이너 중지 및 삭제
            if [ "$(sudo docker ps -q -f name=^/${CONTAINER_NAME}$)" ]; then
                echo "Stopping named container: ${CONTAINER_NAME}"
                sudo docker stop ${CONTAINER_NAME}
            fi
            if [ "$(sudo docker ps -aq -f name=^/${CONTAINER_NAME}$)" ]; then
                echo "Removing named container: ${CONTAINER_NAME}"
                sudo docker rm ${CONTAINER_NAME}
            fi

            # 4-2. (보험용) 8080 포트를 사용하는 다른 컨테이너가 있다면 중지 및 삭제
            ZOMBIE_CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080")
            if [ -n "$ZOMBIE_CONTAINER_ID" ]; then
                echo "Stopping zombie container using port 8080: ${ZOMBIE_CONTAINER_ID}"
                sudo docker stop $ZOMBIE_CONTAINER_ID
                echo "Removing zombie container: ${ZOMBIE_CONTAINER_ID}"
                sudo docker rm $ZOMBIE_CONTAINER_ID
            fi

            # 5. 새로운 Docker 이미지 빌드
            echo "--- Building new Docker image ---"
            sudo docker build --no-cache -t shopsphere-backend .

            # 6. 새로운 컨테이너 실행
            echo "--- Running new container ---"
            sudo docker run -d -p 8080:8080 --name ${CONTAINER_NAME} shopsphere-backend

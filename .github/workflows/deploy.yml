name: Backend CI/CD Deploy

on:
  push:
    branches:
      - master
      
  pull_request:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Backend
        uses: actions/checkout@v3
        with:
          path: backend

      #####################################
      # 2. Checkout Frontend Repository
      #####################################
      - name: Checkout Frontend
        uses: actions/checkout@v3
        with:
          repository: Sahmyook-4-team/ShopSphere-Frontend
          token: ${{ secrets.GH_TOKEN }}
          path: frontend

      #####################################
      # 3. Setup Node.js and Build Frontend
      #####################################
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install Frontend Dependencies
        working-directory: frontend
        run: npm install

      - name: Build Frontend
        working-directory: frontend
        run: |
          CI=false npm run build

      #####################################
      # 4. Copy Frontend build to Backend static
      #####################################
      - name: Copy Frontend Build to Backend Static Folder
        run: |
          rm -rf backend/src/main/resources/static/*
          cp -r frontend/build/* backend/src/main/resources/static/

      #####################################
      # 5. Setup JDK and Build Backend JAR
      #####################################
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build Backend JAR
        working-directory: backend
        run: |
          chmod +x ./gradlew
          ./gradlew bootJar -x test

      ############################################################
      # NEW STEP: Move JAR to a predictable location
      ############################################################
      - name: Move JAR to root
        run: mv backend/build/libs/app.jar app.jar

      #####################################
      # 6. Upload JAR to EC2 and Run Docker
      #####################################
      - name: Upload JAR to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          # 이제 source는 매우 단순하고 명확해집니다.
          source: app.jar
          target: ~/ShopSphere-Backend


      ############################################################
      # 7. EC2에 접속하여 Docker로 배포 실행
      # EC2에서는 전송받은 JAR로 새 Docker 이미지를 빌드하고 컨테이너를 실행합니다.
      ############################################################
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            echo "--- Navigating to deployment directory ---"
            cd ~/ShopSphere-Backend

            CONTAINER_NAME="shopsphere-backend-app"

            echo "--- Stopping and removing existing container (if any) ---"
            # 실행 중이거나 종료된 상태의 컨테이너를 모두 찾아 강제로 삭제 (가장 확실한 방법)
            if [ "$(sudo docker ps -aq -f name=^/${CONTAINER_NAME}$)" ]; then
              sudo docker rm -f ${CONTAINER_NAME}
            fi
            
            # (선택적 안전장치) 포트 충돌 방지를 위한 좀비 컨테이너 정리
            ZOMBIE_CONTAINER_ID=$(sudo docker ps -aq --filter "publish=8080")
            if [ -n "$ZOMBIE_CONTAINER_ID" ]; then
                echo "--- Removing zombie container on port 8080 ---"
                sudo docker rm -f $ZOMBIE_CONTAINER_ID
            fi

            sudo docker system prune -af

            echo "--- Building new Docker image ---"
            # EC2의 ~/ShopSphere-Backend 폴더에는 app.jar와 Dockerfile이 있어야 합니다.
            sudo docker build --no-cache -t shopsphere-backend .
            
            echo "--- Running new Docker container ---"
            sudo docker run -d -p 8080:8080 --name ${CONTAINER_NAME} shopsphere-backend
            
            echo "--- Deployment finished ---"
